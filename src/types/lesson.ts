// src/types/lesson.ts

/**
 * V√≠ d·ª• minh h·ªça trong b√†i h·ªçc
 */
export interface Example {
  en?: string;
  vi?: string;
  note?: string;
}

/**
 * C·∫∑p c√¢u sai/ƒë√∫ng + gi·∫£i th√≠ch
 */
export interface ErrorExample {
  wrong?: string;
  correct?: string;
  explanation?: string;
}

/**
 * Ph·∫ßn (section) trong b√†i h·ªçc ‚Äî c√≥ th·ªÉ l√† l√Ω thuy·∫øt, v√≠ d·ª•, b·∫£ng, media...
 */
export interface LessonSection {
  _id?: string; // ID th·∫≠t t·ª´ MongoDB
  id?: string; // ID t·∫°m (ch·ªâ d√πng ·ªü FE)
  lesson_id?: string; // Tham chi·∫øu ƒë·∫øn Lesson cha
  order: number; // Th·ª© t·ª± trong b√†i h·ªçc
  title: string;
  type: "text" | "example" | "error" | "media" | "table";
  content?: string;
  example?: Example;
  error?: ErrorExample;
  medias_id?: string[]; // Danh s√°ch ID media (tr∆∞·ªùng h·ª£p c√≥ nhi·ªÅu media)
  mediaId?: string; // Media ch√≠nh (1 c√°i duy nh·∫•t)
  mediaUrl?: string; // URL preview (FE)
  tableData?: string[][]; // D·ªØ li·ªáu b·∫£ng (n·∫øu type = table)
}

/**
 * Th√¥ng tin b√†i h·ªçc (Lesson)
 * L∆∞u metadata + tham chi·∫øu ƒë·∫øn c√°c section
 */
export interface Lesson {
  _id?: string; // ID MongoDB
  part_type: number; // üß© S·ªë th·ª© t·ª± part (1‚Äì7)
  topic?: string[]; // ID ch·ªß ƒë·ªÅ li√™n quan (optional ƒë·ªÉ d·ªÖ t·∫°o)
  title: string; // Ti√™u ƒë·ªÅ b√†i h·ªçc
  status: "draft" | "pending" | "approved" | "open" | "closed"; // ‚úÖ match enum BE TestStatus
  summary?: string; // M√¥ t·∫£ ng·∫Øn
  planned_completion_time?: number; // Th·ªùi l∆∞·ª£ng d·ª± ki·∫øn (ph√∫t)
  weight?: number; // Tr·ªçng s·ªë (AI/LP)
  sections_id?: LessonSection[]; // Danh s√°ch section con
  created_at?: string;
  created_by?: string;
  updated_at?: string;
}
