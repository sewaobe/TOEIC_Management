import { useEffect, useState } from "react";
import {
  Box,
  Typography,
  Paper,
  TextField,
  MenuItem,
  Grid,
  Button,
  Divider,
  Autocomplete,
  CircularProgress,
} from "@mui/material";
import { useParams, useNavigate } from "react-router-dom";
import { toast } from "sonner";
import quizService from "./services/quiz.service";
import { lessonManagerService } from "../../../../services/lesson_manager.service";
import { useQuizBuilderViewModel } from "./viewmodel/useQuizBuilderViewModel";
import GroupForm from "../../components/GroupForm";

export default function EditQuizPage() {
  const { id } = useParams();
  const navigate = useNavigate();

  // üß† ViewModel ph·∫£i ƒë∆∞·ª£c kh·ªüi t·∫°o ·ªü ƒë·∫ßu component
  const vm = useQuizBuilderViewModel();

  const [loading, setLoading] = useState(true);
  const [form, setForm] = useState<any>({
    title: "",
    topic: [],
    part_type: "",
    level: "",
    status: "",
    planned_completion_time: 0,
    weight: 0.1,
  });
  const [topicOptions, setTopicOptions] = useState<{ id: string; title: string }[]>([]);

  // üß≠ L·∫•y danh s√°ch topic th·∫≠t
  useEffect(() => {
    const fetchTopics = async () => {
      try {
        const topics = await lessonManagerService.getAllTopicTitles();
        setTopicOptions(topics);
      } catch (error) {
        console.error("‚ùå L·ªói khi t·∫£i topic:", error);
        toast.error("Kh√¥ng th·ªÉ t·∫£i danh s√°ch ch·ªß ƒë·ªÅ!");
      }
    };
    fetchTopics();
  }, []);

  // üß† L·∫•y quiz hi·ªán c√≥
  useEffect(() => {
    const fetchQuiz = async () => {
      try {
        const res = await quizService.getById(id!);
        const quiz = res.data!;

        // G√°n v√†o form
        setForm({
          title: quiz.title || "",
          topic: quiz.topic?.map((t: any) => t._id || t.id) || [],
          part_type: quiz.part_type || "",
          level: quiz.level || "",
          status: quiz.status || "draft",
          planned_completion_time: quiz.planned_completion_time || 0,
          weight: quiz.weight || 0.1,
        });

        // G√°n d·ªØ li·ªáu quiz v√†o ViewModel
        vm.initFromQuiz(quiz);
      } catch (error) {
        console.error(error);
        toast.error("Kh√¥ng t·∫£i ƒë∆∞·ª£c quiz!");
      } finally {
        setLoading(false);
      }
    };
    fetchQuiz();
  }, [id]);

  if (loading) {
    return (
      <Box display="flex" justifyContent="center" mt={10}>
        <CircularProgress />
      </Box>
    );
  }

  // üñäÔ∏è C·∫≠p nh·∫≠t gi√° tr·ªã form
  const handleChange = (field: string, value: any) => {
    setForm((prev: any) => ({ ...prev, [field]: value }));
  };

  // üíæ L∆∞u quiz sau ch·ªânh s·ª≠a
  const handleUpdate = async () => {
    try {
      const payload = {
        ...form,
        part_type: form.part_type ? Number(form.part_type) : undefined,
        topic: form.topic,
        group_ids: vm.groups,
      };

      await quizService.update(id!, payload);
      toast.success("üéâ C·∫≠p nh·∫≠t quiz th√†nh c√¥ng!");
      navigate("/ctv/quiz");
    } catch (error) {
      console.error(error);
      toast.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t quiz!");
    }
  };

  return (
    <Box sx={{ p: 3, maxWidth: 1100, mx: "auto" }}>
      <Typography variant="h4" fontWeight={700} mb={3}>
        ‚úèÔ∏è Ch·ªânh s·ª≠a Quiz
      </Typography>

      {/* üîπ Form th√¥ng tin c∆° b·∫£n */}
      <Paper sx={{ p: 3, mb: 4, borderRadius: 3, bgcolor: "#fafafa" }}>
        <Grid container spacing={2}>
          {/* T√™n quiz */}
          <Grid size={{ xs: 12, md: 4 }}>
            <TextField
              fullWidth
              label="T√™n Quiz"
              value={form.title}
              onChange={(e) => handleChange("title", e.target.value)}
              sx={{ bgcolor: "white" }}
            />
          </Grid>

          {/* Tr·∫°ng th√°i */}
          <Grid size={{ xs: 12, md: 2.5 }}>
            <TextField
              select
              fullWidth
              label="Tr·∫°ng th√°i"
              value={form.status}
              onChange={(e) => handleChange("status", e.target.value)}
              sx={{ bgcolor: "white" }}
            >
              <MenuItem value="draft">Nh√°p</MenuItem>
              <MenuItem value="published">C√¥ng khai</MenuItem>
            </TextField>
          </Grid>

          {/* Level */}
          <Grid size={{ xs: 12, md: 2.5 }}>
            <TextField
              select
              fullWidth
              label="Tr√¨nh ƒë·ªô (Level)"
              value={form.level}
              onChange={(e) => handleChange("level", e.target.value)}
              sx={{ bgcolor: "white" }}
            >
              <MenuItem value="">Ch∆∞a ch·ªçn</MenuItem>
              <MenuItem value="A2">A2</MenuItem>
              <MenuItem value="B1">B1</MenuItem>
              <MenuItem value="B2">B2</MenuItem>
              <MenuItem value="C1">C1</MenuItem>
            </TextField>
          </Grid>

          {/* Part Type */}
          <Grid size={{ xs: 12, md: 3 }}>
            <TextField
              select
              fullWidth
              label="Ph·∫ßn thi (Part Type)"
              value={form.part_type}
              onChange={(e) => handleChange("part_type", e.target.value)}
              sx={{ bgcolor: "white" }}
            >
              <MenuItem value="">Ch∆∞a ch·ªçn</MenuItem>
              {[1, 2, 3, 4, 5, 6, 7].map((p) => (
                <MenuItem key={p} value={p}>
                  Part {p}
                </MenuItem>
              ))}
            </TextField>
          </Grid>

          {/* Ch·ªß ƒë·ªÅ (topic) */}
          <Grid size={{ xs: 12, md: 6 }}>
            <Autocomplete
              multiple
              options={topicOptions}
              getOptionLabel={(option) => option.title}
              value={topicOptions.filter((t) => form.topic.includes(t.id))}
              onChange={(event, newValue) =>
                handleChange("topic", newValue.map((t) => t.id))
              }
              renderInput={(params) => (
                <TextField {...params} label="Ch·ªß ƒë·ªÅ (Topic)" placeholder="Ch·ªçn 1 ho·∫∑c nhi·ªÅu ch·ªß ƒë·ªÅ" />
              )}
              sx={{ bgcolor: "white" }}
            />
          </Grid>

          {/* Planned completion */}
          <Grid size={{ xs: 12, md: 3 }}>
            <TextField
              fullWidth
              type="number"
              label="Th·ªùi gian d·ª± ki·∫øn (ph√∫t)"
              value={form.planned_completion_time}
              onChange={(e) =>
                handleChange("planned_completion_time", Number(e.target.value))
              }
              sx={{ bgcolor: "white" }}
            />
          </Grid>

          {/* Weight */}
          <Grid size={{ xs: 12, md: 3 }}>
            <TextField
              fullWidth
              type="number"
              label="Tr·ªçng s·ªë (weight)"
              value={form.weight}
              onChange={(e) => handleChange("weight", Number(e.target.value))}
              sx={{ bgcolor: "white" }}
            />
          </Grid>
        </Grid>
      </Paper>

      {/* üî∏ Danh s√°ch nh√≥m c√¢u h·ªèi */}
      {vm.groups.map((g: any, gi: number) => (
        <Box key={gi} mb={3}>
          <GroupForm
            groupIndex={gi}
            group={g}
            tagOptions={["grammar", "vocabulary"]}
            onChange={vm.updateGroup}
            onChangeQuestion={vm.updateQuestion}
            onAddQuestion={vm.addQuestion}
            onRemoveQuestion={vm.removeQuestion}
            isQuiz={true}
          />
          <Button
            color="error"
            variant="outlined"
            size="small"
            onClick={() => vm.removeGroup(gi)}
            sx={{ mt: 1 }}
          >
            üóëÔ∏è X√≥a nh√≥m {gi + 1}
          </Button>
        </Box>
      ))}

      <Divider sx={{ my: 3 }} />

      {/* ‚ûï Th√™m nh√≥m + L∆∞u thay ƒë·ªïi */}
      <Box display="flex" gap={2}>
        <Button
          variant="outlined"
          onClick={vm.addGroup}
          sx={{
            borderColor: "#2563eb",
            color: "#2563eb",
            ":hover": { bgcolor: "#eff6ff" },
          }}
        >
          ‚ûï Th√™m nh√≥m m·ªõi
        </Button>
        <Button
          variant="contained"
          onClick={handleUpdate}
          sx={{ bgcolor: "#2563eb", ":hover": { bgcolor: "#1e40af" } }}
        >
          üíæ L∆∞u thay ƒë·ªïi
        </Button>
      </Box>
    </Box>
  );
}
