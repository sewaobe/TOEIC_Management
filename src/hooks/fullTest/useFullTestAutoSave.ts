import { useEffect, useState } from "react";

/**
 * Hook chuy√™n d√πng cho CreateFullTestPage:
 * - T·ª± ƒë·ªông l∆∞u draft v√†o localStorage
 * - Ki·ªÉm tra d·ªØ li·ªáu meaningful
 * - Cho ph√©p kh√¥i ph·ª•c / b·ªè qua draft
 */
export function useFullTestAutoSave(defaultDraft: any) {
  const STORAGE_KEY = "draft-fulltest";

  const [draft, setDraft] = useState(() => {
    const raw = localStorage.getItem(STORAGE_KEY);
    return raw ? JSON.parse(raw) : defaultDraft;
  });

  const [showRestoreDialog, setShowRestoreDialog] = useState(false);
  const [hasCheckedDraft, setHasCheckedDraft] = useState(false);

  // üîé Ki·ªÉm tra c√≥ draft c≈© kh√¥ng & c√≥ d·ªØ li·ªáu meaningful kh√¥ng
  useEffect(() => {
    if (!hasCheckedDraft) {
      const raw = localStorage.getItem(STORAGE_KEY);
      if (raw) {
        try {
          const parsed = JSON.parse(raw);
          if (hasMeaningfulFullTestData(parsed)) {
            setShowRestoreDialog(true);
          } else {
            localStorage.removeItem(STORAGE_KEY);
          }
        } catch {
          localStorage.removeItem(STORAGE_KEY);
        }
      }
      setHasCheckedDraft(true);
    }
  }, [hasCheckedDraft]);

  // üíæ T·ª± ƒë·ªông l∆∞u khi draft thay ƒë·ªïi
  useEffect(() => {
    if (hasMeaningfulFullTestData(draft)) {
      localStorage.setItem(STORAGE_KEY, JSON.stringify(draft));
    } else {
      localStorage.removeItem(STORAGE_KEY);
    }
  }, [draft]);

  // üß≠ Handlers
  const restoreDraft = () => setShowRestoreDialog(false);
  const discardDraft = () => {
    localStorage.removeItem(STORAGE_KEY);
    setDraft(defaultDraft);
    setShowRestoreDialog(false);
  };

  return { draft, setDraft, showRestoreDialog, restoreDraft, discardDraft };
}

// =============================
// üß© H√†m ki·ªÉm tra draft c√≥ d·ªØ li·ªáu meaningful
// =============================
function hasMeaningfulFullTestData(draft: any): boolean {
  if (!draft) return false;

  // ‚úÖ N·∫øu c√≥ ti√™u ƒë·ªÅ ho·∫∑c ch·ªß ƒë·ªÅ ‚Üí coi l√† meaningful
  if (draft.form?.title?.trim() || draft.form?.topic?.trim()) return true;

  // ‚úÖ Duy·ªát qua t·ª´ng Part trong draft.questions
  return Object.values(draft.questions || {}).some((p: any) => {
    if (!Array.isArray(p.groups)) return false;

    // Duy·ªát qua t·ª´ng group
    return p.groups.some((g: any) => {
      const noTitle = !g.title?.trim();
      const noAudio = !g.audioUrl;
      const noImages = !Array.isArray(g.imagesUrl) || g.imagesUrl.length === 0;

      // === üîé Ki·ªÉm tra n·ªôi dung c√¢u h·ªèi b√™n trong ===
      const hasRealQuestion =
        Array.isArray(g.questions) &&
        g.questions.some((q: any) => {
          const hasText =
            typeof q.textQuestion === "string" && q.textQuestion.trim() !== "";
          const hasExplanation =
            typeof q.explanation === "string" && q.explanation.trim() !== "";
          const hasTag = Array.isArray(q.tags) && q.tags.length > 0;
          const hasChoiceContent = Object.values(q.choices || {}).some(
            (v) => typeof v === "string" && v.trim() !== ""
          );

          // N·∫øu t·∫•t c·∫£ ƒë·ªÅu r·ªóng => kh√¥ng t√≠nh
          return hasText || hasExplanation || hasTag || hasChoiceContent;
        });

      // === üîç N·∫øu group ho√†n to√†n r·ªóng (kh√¥ng title/audio/image/c√¢u h·ªèi th·∫≠t) ‚Üí b·ªè qua ===
      const isCompletelyEmpty =
        noTitle && noAudio && noImages && !hasRealQuestion;

      return !isCompletelyEmpty;
    });
  });
}
